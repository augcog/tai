[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ai-course-bot-backend"
version = "0.1.0"
description = "FastAPI backend service for TAI course assistant with RAG capabilities"
authors = ["TAI Team"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Core FastAPI and web framework dependencies
fastapi = "^0.115.6"
uvicorn = {extras = ["standard"], version = "^0.32.1"}
starlette = "^0.40.0"
pydantic = "^2.7.3"
pydantic-settings = "^2.8.1"

# Database dependencies
sqlalchemy = "^2.0.39"
sqlite-vss = "^0.1.2"

# AI and ML dependencies
FlagEmbedding = "^1.3.4"
torch = "^2.3.0"
transformers = "^4.51.3"
openai = "^1.31.0"
numpy = "^1.26.4"
huggingface-hub = "^0.33.0"

# Authentication and security
PyJWT = "^2.8.0"
itsdangerous = "^2.2.0"

# Utilities and caching
cachetools = "^5.5.1"
python-dotenv = "^1.0.1"
jsonschema = "^4.23.0"

# File watching for development
watchdog = "^4.0.0"

# Google OAuth dependencies
google-auth = "^2.38.0"
google-auth-oauthlib = "^1.2.1"
oauthlib = "^3.2.2"
requests-oauthlib = "^2.0.0"
pyasn1 = "^0.6.1"
pyasn1-modules = "^0.4.1"
rsa = "^4.9"

# Admin interface
sqladmin = "^0.20.1"
requests = "^2.32.4"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.1.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"

# Code quality
black = "^24.0.0"
ruff = "^0.1.0"
mypy = "^1.7.0"

# Development tools
ipython = "^8.0.0"

[tool.poetry.group.test.dependencies]
# Additional testing utilities
httpx = "^0.25.0"  # For async testing
pytest-mock = "^3.11.0"
pytest-xdist = "^3.3.0"  # Parallel testing

[tool.poetry.scripts]
# Entry points for running the application
tai-backend = "main:main"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | tests/fixtures
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "N806",  # variable name should be lowercase
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"app/core/models/*.py" = ["N815"]  # Allow mixedCase for model fields

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

# Ignore missing type stubs for third-party packages
[[tool.mypy.overrides]]
module = [
    "FlagEmbedding.*",
    "sqlite_vss.*",
    "sqladmin.*",
    "watchdog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=app --cov-report=term-missing"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2