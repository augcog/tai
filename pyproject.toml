[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "tai-monorepo"
version = "0.1.0"
description = "Teaching Assistant Intelligence - AI-powered course assistant with RAG capabilities"
authors = ["TAI Team"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.10,<3.13"

# Core FastAPI and web framework dependencies
fastapi = "^0.115.6"
uvicorn = {extras = ["standard"], version = "^0.32.1"}
starlette = "^0.40.0"
pydantic = "^2.7.3"
pydantic-settings = "^2.8.1"

# Database dependencies
sqlalchemy = "^2.0.39"
sqlite-vss = "^0.1.2"

# AI and ML dependencies
FlagEmbedding = "^1.3.4"
torch = "^2.3.0"
transformers = "^4.51.3"
openai = "^1.58.1"
numpy = "^1.26.4"
huggingface-hub = "^0.33.0"
sentence-transformers = "^3.1.1"
accelerate = "^1.2.1"
safetensors = "^0.5.0"
tokenizers = "^0.21.0"
mteb = "^1.26.4"

# Authentication and security
PyJWT = "^2.8.0"
itsdangerous = "^2.2.0"
google-auth = "^2.38.0"
google-auth-oauthlib = "^1.2.1"
oauthlib = "^3.2.2"
requests-oauthlib = "^2.0.0"
pyasn1 = "^0.6.1"
pyasn1-modules = "^0.4.1"
rsa = "^4.9"

# Document processing
PyMuPDF = "^1.24.14"
python-docx = "^1.1.2"
openpyxl = "^3.1.5"
markdown = "^3.7"
beautifulsoup4 = "^4.12.3"
lxml = "^5.2.1"
pypdf = "^5.1.0"

# Image processing
Pillow = "^11.1.0"

# Data analysis and visualization
pandas = "^2.2.3"
plotly = "^5.24.1"
matplotlib = "^3.10.3"
scipy = "^1.15.0"
scikit-learn = "^1.6.0"

# Utilities and caching
cachetools = "^5.5.1"
python-dotenv = "^1.0.1"
jsonschema = "^4.23.0"
tqdm = "^4.66.2"
requests = "^2.32.4"
aiohttp = "^3.11.11"
click = "^8.1.7"
rich = "^13.9.4"
loguru = "^0.7.3"
PyYAML = "^6.0.1"
toml = "^0.10.2"

# File watching for development
watchdog = "^4.0.0"

# Admin interface
sqladmin = "^0.20.1"

# NLP packages
nltk = "^3.9.1"
spacy = "^3.7.0"
regex = "^2024.11.6"
rapidfuzz = "^3.11.0"
langdetect = "^1.0.9"
ftfy = "^6.3.1"

# ML utilities
sentencepiece = ">=0.1.99"
einops = "^0.8.0"
timm = "^0.9.16"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.1.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
pytest-xdist = "^3.3.0"
httpx = "^0.28.1"

# Code quality
black = "^24.0.0"
ruff = "^0.1.0"
mypy = "^1.7.0"

# Development tools
ipython = "^8.0.0"
jupyter = "^1.0.0"

[tool.poetry.group.cv.dependencies]
# Computer Vision packages (optional)
opencv-python = "^4.6.0.66"
opencv-contrib-python = "^4.6.0.66"
opencv-python-headless = "^4.10.0.84"
albumentations = "^1.4.11"
scikit-image = "^0.25.0"
imageio = "^2.36.1"

[tool.poetry.group.ocr.dependencies]
# OCR packages (optional - heavy dependencies)
paddleocr = {version = "^2.7.3", python = ">=3.10,<3.13", optional = true}
rapidocr-onnxruntime = {version = "^1.3.25", optional = true}
pix2text = {version = "^1.1.1", python = ">=3.10,<3.13", optional = true}
easyocr = "^1.7.0"

[tool.poetry.group.ml-heavy.dependencies]
# Heavy ML packages (optional)
optimum = "^1.23.3"
onnx = "^1.17.0"
onnxruntime = "^1.20.1"
bitsandbytes = {version = ">=0.41.0", optional = true}

[tool.poetry.group.ml-training.dependencies]
# Training packages (optional)
pytorch-lightning = "^2.5.0"
wandb = "^0.19.1"
tensorboard = "^2.18.0"
datasets = "^2.19.1"
evaluate = "^0.4.3"

[tool.poetry.group.video.dependencies]
# Video processing (optional)
moviepy = "^1.0.3"
ffmpeg-python = "^0.2.0"
imageio-ffmpeg = "^0.5.1"
scenedetect = "^0.6.3"

[tool.poetry.group.web.dependencies]
# Web scraping (optional)
playwright = "^1.40.0"
selenium = "^4.15.0"
aiolimiter = "^1.2.1"

[tool.poetry.group.formats.dependencies]
# Additional formats (optional)
python-pptx = "^0.6.23"
pdf2docx = "^0.5.8"
pypdfium2 = "^4.30.1"
rarfile = "^4.2"

[tool.poetry.extras]
# Optional installation groups
cv = ["opencv-python", "opencv-contrib-python", "albumentations", "scikit-image", "imageio"]
ocr = ["paddleocr", "rapidocr-onnxruntime", "pix2text", "easyocr"]
ml-heavy = ["optimum", "onnx", "onnxruntime", "bitsandbytes"]
ml-training = ["pytorch-lightning", "wandb", "tensorboard", "datasets", "evaluate"]
video = ["moviepy", "ffmpeg-python", "imageio-ffmpeg", "scenedetect", "opencv-python-headless"]
web = ["playwright", "selenium", "aiolimiter"]
formats = ["python-pptx", "pdf2docx", "pypdfium2", "rarfile"]
gpu = ["bitsandbytes"]
full = [
    "opencv-python", "opencv-contrib-python", "albumentations", "scikit-image", "imageio",
    "paddleocr", "rapidocr-onnxruntime", "pix2text", "easyocr",
    "optimum", "onnx", "onnxruntime", "bitsandbytes",
    "pytorch-lightning", "wandb", "tensorboard", "datasets", "evaluate",
    "moviepy", "ffmpeg-python", "imageio-ffmpeg", "scenedetect", "opencv-python-headless",
    "playwright", "selenium", "aiolimiter",
    "python-pptx", "pdf2docx", "pypdfium2", "rarfile"
]

[tool.poetry.scripts]
# Entry points for all components
tai-backend = "ai_course_bot.ai_chatbot_backend.main:main"
rag-convert = "rag.file_conversion_router.api:convert_files"
rag-embed = "rag.file_conversion_router.embedding_create:main"
rag-process = "rag.file_conversion_router.api:process_pipeline"
generate-dataset = "evaluation.dataset_generate.generate:main"
analyze-performance = "evaluation.dataset_generate.analyze:main"
file-organizer = "rag.file_organizer.src.organizer:organize_command"

# Tool configurations for the entire workspace
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | data
  | outputs
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E722",  # bare except (common in ML code)
    "N806",  # variable name should be lowercase
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"ai_course_bot/ai_chatbot_backend/app/core/models/*.py" = ["N815"]
"rag/file_conversion_router/conversion/*" = ["E722"]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

# Ignore missing type stubs for third-party packages
[[tool.mypy.overrides]]
module = [
    "FlagEmbedding.*",
    "sqlite_vss.*",
    "sqladmin.*",
    "watchdog.*",
    "torch.*",
    "transformers.*",
    "sentence_transformers.*",
    "cv2.*",
    "paddleocr.*",
    "magic_pdf.*",
    "albumentations.*",
    "moviepy.*",
    "scenedetect.*",
    "playwright.*",
    "selenium.*",
    "spacy.*",
    "nltk.*",
    "easyocr.*",
    "rapidocr.*",
    "pix2text.*",
    "cnocr.*",
    "cnstd.*",
    "unimernet.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "ai_course_bot/ai_chatbot_backend/tests",
    "rag/tests",
    "evaluation/dataset_generate/tests",
    "rag/file_organizer/tests",
    "tests"
]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "cv: marks tests requiring computer vision packages",
    "ocr: marks tests requiring OCR packages",
    "gpu: marks tests requiring GPU",
    "openai: marks tests requiring OpenAI API",
]

[tool.coverage.run]
source = [
    "ai_course_bot/ai_chatbot_backend/app",
    "rag/file_conversion_router",
    "evaluation/dataset_generate",
    "rag/file_organizer/src"
]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2